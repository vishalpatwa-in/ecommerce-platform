# E-commerce Platform Development Rules

1. Development Workflow & Implementation Rules
   - Phase 1: Core Setup & Authentication
     - Configure Docker environment first
     - Set up MongoDB, Redis, and Kafka containers
     - Initialize Node.js/Express backend
     - Set up Next.js & Tailwind CSS frontend
     - Set up shadcn/ui for components and styling
     - Implement Google OAuth integration
     - Test authentication flows end-to-end

   - Phase 2: Product & Order Management
     - Create and verify database schemas
     - Implement CRUD operations with tests
     - Build frontend components
     - Test shopping cart functionality
     - Verify order management system

   - Phase 3: Payment & Shipping Integration
     - Follow gateway-specific documentation
     - Test in sandbox environment first
     - Implement webhook verifications
     - Set up shipping carrier integrations
     - Test end-to-end fulfillment flow

   - Phase 4: Frontend & UI Development
     - Create reusable components
     - Implement responsive layouts
     - Build admin and storefront pages
     - Test user interactions
     - Optimize performance

   - Phase 5: Testing & Deployment
     - Run comprehensive test suites
     - Verify all integrations
     - Check security measures
     - Deploy to staging
     - Monitor production deployment

Note: For each development phase:
1. Follow official documentation
2. Make incremental changes
3. Run 'npm run build' after each change
4. Push to git only after successful build
5. Test thoroughly before moving to next phase
6. Document all implementation steps
7. Maintain version compatibility
8. Keep security measures in check

2. Core Setup & Authentication
   - Run 'npm run build' after any changes to verify build success
   - On successful build, commit and push to git
   - Test Google OAuth integration before deployment
   - Verify user authentication flows in both admin and storefront

3. Product & Order Management
   - Run 'npm run build' after implementing product CRUD operations
   - Push to git after successful product schema implementation
   - Test shopping cart functionality thoroughly
   - Verify order management system before git push

4. Payment Integration
   - Test payment gateway integrations in sandbox mode
   - Run 'npm run build' before deploying payment features
   - Push to git only after successful payment flow testing
   - Verify refund system before deployment

5. Fulfillment System
   - Test each shipping carrier integration separately
   - Run 'npm run build' after each carrier integration
   - Push to git after successful shipping label generation
   - Verify fulfillment workflow end-to-end

6. Analytics & Monitoring
   - Test activity logging before deployment
   - Run 'npm run build' after implementing tracking features
   - Push to git after successful monitoring setup
   - Verify analytics dashboard functionality

7. Testing & Optimization
   - Run all test suites before any deployment
   - Execute 'npm run build' after optimization changes
   - Push to git after successful performance testing
   - Verify security measures before deployment

8. Deployment Rules
   - Configure CI/CD pipeline with build verification
   - Run 'npm run build' in staging environment
   - Push to git only after successful staging deployment
   - Verify backup systems before production deployment

Note: Always follow the sequence:
1. Make changes
2. Run 'npm run build'
3. If build succeeds, commit and push to git
4. If build fails, fix issues and repeat process

9. Documentation & Integration Rules
   - Follow Official Documentation
     - Study and strictly adhere to latest API documentation from payment gateways
     - Keep Postman collections updated with latest endpoints
     - Maintain documentation version compatibility
     - Test all API endpoints in sandbox before production

   - Payment Gateway Integration
     - Follow Razorpay integration checklist and testing procedures
     - Complete sandbox testing before live credentials
     - Implement proper webhook verification for Cashfree
     - Maintain separate test and production API keys
     - Follow payment gateway specific error handling

   - Shipping Integration  
     - Follow Shiprocket webhook setup guidelines
     - Test EcomExpress tracking integration in staging
     - Validate ParcelX API responses before deployment
     - Maintain shipping carrier credentials securely
     - Test order tracking webhooks end-to-end

   - Documentation Updates
     - Document all API integration steps
     - Maintain postman collection for each integration
     - Keep integration troubleshooting guides updated
     - Document webhook payload structures
     - Track API version changes and updates

   - Testing & Verification
     - Test all integrations in sandbox/staging first
     - Verify webhook signatures for payment gateways
     - Test shipping label generation
     - Validate tracking status updates
     - Test refund flows end-to-end

Note: For all integrations:
1. Read official documentation thoroughly
2. Test in sandbox/staging environment
3. Verify security measures and signatures
4. Document integration steps and responses
5. Monitor for API updates and changes
